{"version":3,"sources":["../../server/models/index.js"],"names":["basename","module","filename","env","process","NODE_ENV","db","sequelize","DEV_DB_URI","TEST_DB_URI","DATABASE_URI","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate","Sequelize","gracefulShutdown","msg","callback","close","console","log","once","kill","pid","on","exit","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW,eAAKA,QAAL,CAAcC,OAAOC,QAArB,CAAjB;AACA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMC,KAAK,EAAX;;AAEA,IAAIC,kBAAJ;AACA,IAAIJ,QAAQ,aAAZ,EAA2B;AACzBI,cAAY,wBAAcH,QAAQD,GAAR,CAAYK,UAA1B,CAAZ;AACD,CAFD,MAEO,IAAIL,QAAQ,MAAZ,EAAoB;AACzBI,cAAY,wBAAcH,QAAQD,GAAR,CAAYM,WAA1B,CAAZ;AACD,CAFM,MAEA;AACLF,cAAY,wBAAcH,QAAQD,GAAR,CAAYO,YAA1B,CAAZ;AACD;;AAED,aACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEU;AAAA,SACLC,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IACCD,SAASd,QADV,IAECc,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAHd;AAAA,CAFV,EAMGC,OANH,CAMW,UAACH,IAAD,EAAU;AACjB,MAAMI,QAAQX,UAAUY,MAAV,CAAiB,eAAKC,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAR,KAAGY,MAAMG,IAAT,IAAiBH,KAAjB;AACD,CATH;;AAWAI,OAAOC,IAAP,CAAYjB,EAAZ,EAAgBW,OAAhB,CAAwB,UAACO,SAAD,EAAe;AACrC,MAAIlB,GAAGkB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BnB,OAAGkB,SAAH,EAAcC,SAAd,CAAwBnB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGoB,SAAH;;AAEA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAMC,QAAN,EAAmB;AAC1CvB,KAAGC,SAAH,CAAauB,KAAb,CAAmB,YAAM;AACvBC,YAAQC,GAAR,oCAA6CJ,GAA7C;AACAC;AACD,GAHD;AAID,CALD;AAMA;AACAzB,QAAQ6B,IAAR,CAAa,SAAb,EAAwB,YAAM;AAC5BN,mBAAiB,iBAAjB,EAAoC,YAAM;AACxCvB,YAAQ8B,IAAR,CAAa9B,QAAQ+B,GAArB,EAA0B,SAA1B;AACD,GAFD;AAGD,CAJD;AAKA;AACA/B,QAAQgC,EAAR,CAAW,QAAX,EAAqB,YAAM;AACzBT,mBAAiB,iBAAjB,EAAoC,YAAM;AACxCvB,YAAQiC,IAAR,CAAa,CAAb;AACD,GAFD;AAGD,CAJD;AAKA;AACAjC,QAAQgC,EAAR,CAAW,SAAX,EAAsB,YAAM;AAC1BT,mBAAiB,qBAAjB,EAAwC,YAAM;AAC5CvB,YAAQiC,IAAR,CAAa,CAAb;AACD,GAFD;AAGD,CAJD;;AAMApC,OAAOqC,OAAP,GAAiBhC,EAAjB","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\n\nconst basename = path.basename(module.filename);\nconst env = process.env.NODE_ENV || 'development';\nconst db = {};\n\nlet sequelize;\nif (env === 'development') {\n  sequelize = new Sequelize(process.env.DEV_DB_URI);\n} else if (env === 'test') {\n  sequelize = new Sequelize(process.env.TEST_DB_URI);\n} else {\n  sequelize = new Sequelize(process.env.DATABASE_URI);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter(file =>\n    (file.indexOf('.') !== 0) &&\n    (file !== basename) &&\n    (file.slice(-3) === '.js'))\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nconst gracefulShutdown = (msg, callback) => {\n  db.sequelize.close(() => {\n    console.log(`Mongoose disconnected through ${msg}`);\n    callback();\n  });\n};\n// For nodemon restarts\nprocess.once('SIGUSR2', () => {\n  gracefulShutdown('nodemon restart', () => {\n    process.kill(process.pid, 'SIGUSR2');\n  });\n});\n// For app termination\nprocess.on('SIGINT', () => {\n  gracefulShutdown('app termination', () => {\n    process.exit(0);\n  });\n});\n// For Heroku app termination\nprocess.on('SIGTERM', () => {\n  gracefulShutdown('Heroku app shutdown', () => {\n    process.exit(0);\n  });\n});\n\nmodule.exports = db;\n"]}