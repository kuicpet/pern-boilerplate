{"version":3,"sources":["../../server/models/user.js"],"names":["_","require","bcrypt","sequelize","DataTypes","User","define","username","type","STRING","allowNull","unique","password","email","validate","isEmail","prototype","toJSON","values","Object","assign","get","validPassword","compareSync","generateHash","hashSync","genSaltSync","associate","models","hasMany","Message","as","belongsToMany","Group","through"],"mappings":";;;;;AAAA,IAAMA,IAAIC,QAAQ,QAAR,CAAV;AACA,IAAMC,SAASD,QAAQ,UAAR,CAAf;;kBAEe,UAACE,SAAD,EAAYC,SAAZ,EAA0B;AACvC,MAAMC,OAAOF,UAAUG,MAAV,CAAiB,MAAjB,EAAyB;AACpCC,cAAU;AACRC,YAAMJ,UAAUK,MADR;AAERC,iBAAW,KAFH;AAGRC,cAAQ;AAHA,KAD0B;AAMpCC,cAAU;AACRJ,YAAMJ,UAAUK,MADR;AAERC,iBAAW;AAFH,KAN0B;AAUpCG,WAAO;AACLL,YAAMJ,UAAUK,MADX;AAELC,iBAAW,KAFN;AAGLC,cAAQ,IAHH;AAILG,gBAAU;AACRC,iBAAS;AADD;AAJL;AAV6B,GAAzB,CAAb;;AAoBAV,OAAKW,SAAL,CAAeC,MAAf,GAAwB,YAAY;AAClC,QAAMC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKC,GAAL,EAAlB,CAAf;;AAEA,WAAOH,OAAON,QAAd;AACA,WAAOM,MAAP;AACD,GALD;;AAOAb,OAAKW,SAAL,CAAeM,aAAf,GAA+B,UAAUV,QAAV,EAAoB;AACjD,WAAOV,OAAOqB,WAAP,CAAmBX,QAAnB,EAA6B,KAAKA,QAAlC,CAAP;AACD,GAFD;;AAIAP,OAAKmB,YAAL,GAAoB;AAAA,WACdtB,OAAOuB,QAAP,CAAgBb,QAAhB,EAA0BV,OAAOwB,WAAP,CAAmB,EAAnB,CAA1B,EAAkD,IAAlD,CADc;AAAA,GAApB;;AAGArB,OAAKsB,SAAL,GAAiB,UAACC,MAAD,EAAY;AAC3B;AACAvB,SAAKwB,OAAL,CAAaD,OAAOE,OAApB,EAA6B;AAC3BC,UAAI;AADuB,KAA7B;AAGA1B,SAAK2B,aAAL,CAAmBJ,OAAOK,KAA1B,EAAiC;AAC/BC,eAAS,WADsB;AAE/BH,UAAI;AAF2B,KAAjC;AAID,GATD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAO1B,IAAP;AACD,C","file":"user.js","sourcesContent":["const _ = require('lodash');\nconst bcrypt = require('bcryptjs');\n\nexport default (sequelize, DataTypes) => {\n  const User = sequelize.define('User', {\n    username: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      unique: true\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    email: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      unique: true,\n      validate: {\n        isEmail: true\n      }\n    }\n  });\n\n  User.prototype.toJSON = function () {\n    const values = Object.assign({}, this.get());\n\n    delete values.password;\n    return values;\n  };\n\n  User.prototype.validPassword = function (password) {\n    return bcrypt.compareSync(password, this.password);\n  };\n\n  User.generateHash = password =>\n        bcrypt.hashSync(password, bcrypt.genSaltSync(10), null);\n\n  User.associate = (models) => {\n    // associations can be defined here\n    User.hasMany(models.Message, {\n      as: 'userMessages',\n    });\n    User.belongsToMany(models.Group, {\n      through: 'userGroup',\n      as: 'userGroups',\n    });\n  };\n  // User.beforeCreate((user, options) => {\n  //   return bcrypt.genSalt(10, (err, salt) => {\n  //     bcrypt.hash(user.password, salt, (err, hash) => {\n  //       user.password = hash;\n  //     });\n  //   });\n  // });\n\n  // User.prototype.toJSON = function () {\n  //   const user = this;\n  //   const userObject = user.toObject();\n\n  //   return _.pick(userObject, ['id', 'username', 'email']);\n  // };\n  return User;\n};\n"]}