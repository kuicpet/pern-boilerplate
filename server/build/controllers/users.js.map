{"version":3,"sources":["../../server/controllers/users.js"],"names":["_","require","User","signup","req","res","body","username","email","password","status","json","error","toLowerCase","hashedPassword","generateHash","create","then","user","send","catch","err","signin","pick","findOne","where","console","log","valid","validPassword","getMe","message","getMyGroups","logout","module","exports"],"mappings":"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","file":"users.js","sourcesContent":["const _ = require('lodash');\n\nconst User = require('../models').User;\n\n// Function to signup new users\nconst signup = (req, res) => {\n  if (!req.body.username || !req.body.email || !req.body.password) {\n    return res.status(400).json({\n      error: 'Username, Email, and Password must not be empty'\n    });\n  }\n  const username = req.body.username.toLowerCase();\n  const email = req.body.email.toLowerCase();\n  const hashedPassword = User.generateHash(req.body.password);\n  User.create({\n    username,\n    password: hashedPassword,\n    email,\n  })\n  .then((user) => {\n    res.status(201).send(user);\n  })\n  .catch(err => res.status(400).send(err));\n};\n\n// Function to sign users in\nconst signin = (req, res) => {\n  const body = _.pick(req.body, ['username', 'password']);\n  if (!body.username || !body.password) {\n    return res.status(400).json({\n      error: 'Username or Password must not be empty'\n    });\n  }\n  User.findOne({\n    where: { username: body.username.toLowerCase(),\n    },\n  })\n  .then((user) => {\n    if (!user) {\n      return res.status(401).send({\n        error: 'User not found'\n      });\n    }\n    console.log('password: ', body.password);\n    const valid = user.validPassword(body.password);\n    if (!valid) {\n      return res.status(401).send({\n        error: 'Password is incorrect'\n      });\n    }\n    res.status(201).send(user);\n  }).catch(err => res.status(400).send(err));\n};\n\nconst getMe = (req, res) => {\n  res.send({ message: 'getMe' });\n};\n\nconst getMyGroups = (req, res) => {\n  res.send({ message: 'getMyGroups' });\n};\n\nconst logout = (req, res) => {\n  res.send({ message: 'logout' });\n};\n\nmodule.exports = {\n  signup,\n  signin,\n  getMe,\n  getMyGroups,\n  logout\n};\n"]}